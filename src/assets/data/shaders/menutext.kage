//go:build ignore

//kage:unit pixels

//Based from: https://godotshaders.com/shader/fog-of-war-with-alpha-cut-off-as-white-color/

package main

var Time float
var Pos vec2
var Size vec2
var StartingAmplitude float
var StartingFreq float
var Shift float
var WhiteCutoff float
var Velocity vec2
var Color vec4

func adjustSrcPosForAddressRepeat(p vec2) vec2 {
	origin := imageSrc0Origin()
	size := imageSrc0Size()
	return mod(p-origin, size) + origin
}

func rand(uv vec2) float {
	amplitude, frequency, output := StartingAmplitude, StartingFreq, 0.0
	for i := 0; i < 4; i++ {
		// x := uv * frequency
		x := adjustSrcPosForAddressRepeat(uv) * frequency
		// x := adjustSrcPosForAddressRepeat(uv * frequency)
		output += imageSrc1At(x).x * amplitude
		amplitude /= 2.0
		frequency *= 2.0
	}
	return clamp(output+Shift, 0.0, 1.0)
}

func Fragment(dest vec4, src vec2, col vec4) vec4 {
	orig := imageSrc0At(src)
	uv := adjustSrcPosForAddressRepeat(src)
	uv /= 8.0
	mainTexture := imageSrc0At(uv)
	motion := vec2(uv + Time*StartingFreq*Velocity)
	negative := vec4(1.0-Color.rgb, Color.a)
	color := mix(mainTexture, negative, rand(uv+motion))
	realAfaCutoff := 1.0 - WhiteCutoff
	if color.r*color.g*color.b > realAfaCutoff {
		color.a = 0.0
	}

	if dest.x >= Pos.x-Size.x && dest.x <= Pos.x+Size.x && dest.y >= Pos.y && dest.y <= Pos.y+Size.y {
		return orig + color
		// return orig * color //INFO: (Brandon) - if we want effects on texts only
	}

	// return orig
	return color //INFO: (Brandon) - for debugging
}
